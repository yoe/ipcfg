# The keyword 'must' means that failure to bring up the required
# interface(s) will result in 'ifup' returning a non-zero exit state.

# The keyword 'all' means that 'ifup' should try to bring up all the
# listed interfaces.

# We almost always want to have a local loopback interface, so make
# failure to bring it up a fatal condition
must all ("lo")

# In contrast to 'must', the 'want' keyword tells ipcfg that failure to
# bring up the required interface(s) should not be considered fatal.
# Ifup will attempt to perform the requested operation, but ignore any
# error conditions.

# The "one" keyword signals that ifup should attempt to bring up one,
# but not all, the listed interfaces. Order is significant: in the given
# example, 'eth0' is tried first; only if that fails will we try wlan0.
want one ("eth0", "wlan0")

# If an interface which listed as an argument to the 'one' interface is
# brought down by the system (as opposed to by a manual 'ifdown eth0'
# command), then ipcfg will do nothing. If you want it to automaticaly
# bring up the next interface in that case, use 'trip' instead of 'one'.
# Note that using 'trip' implies running a daemon, which makes it
# incompatible with the 'no daemon' specification.

# Running the daemon will allow ipcfg to do many things it cannot do in
# without it. For instance, if you run the "mii" test on an interface,
# it will detect when the interface goes down and, possibly, signal the
# appropriate events.
# Running the daemon is accomplished explicitly by using the "daemon"
# keyword. However, there is an API function that will start the daemon
# too, so if you load plugins, the daemon may be started implicitly even
# if you did not specify the "daemon" keyword. Read the documentation of
# the plugin to figure out whether or not it does.
daemon
# To forbid running the daemon at all, use 'no daemon' instead of
# 'daemon'.

# We want to load a few plugins
plugins ("wireless", "firewall")

# The next part of the config file is where we define how we want our
# network interfaces to behave. This may involve running tests (or not),
# and activating configuration based on those tests.

# The first is our first wired interface.
iface "eth0" {
	# We don't even want to try bringing up the interface if there
	# is no link.
	require test "mii"
	# If we're anywhere but at home, we do want a firewall -- before
	# the interface is brought up.
	if fail test "network" "home" {
		config "firewall:no-unknown"
	}
	# Assume there'll be a DHCPv4 server somewhere on the network.
	config "dhcp4"
}

iface "wlan0" {
	# We don't need wireless if we already have wired; using the
	# "fail" keyword rather than the "require" one will reverse the
	# result of a test.
	fail test "isup" "eth0"
	# This is a test that is defined in a separate namespace; in
	# this case the "wireless" namespace. It also uses more than
	# just one argument.
	require test "wireless:essidlist" ("work", "home")
	# The "essidlist" test will return some configuration. This
	# specifies that we have to use that.
	config tested
}

# A name for an "iface" stanza does not have to relate in any way to the
# interface name. With this, we can just say "ifup home_wired".
iface "home_wired" {
	# ... However, we do then need to tell ipcfg what network
	# interface we want it to work with.
	set "ifacename" "eth0"
	# We may also want to set some random other stuff.
	set "network" "home"
	# ... and we specify that we want to use DHCPv4.
	config "dhcp4"
}

# The following stanza will do a lot of firewall-specific things. Rather
# than having to specify the firewall namespace before every variable
# name, we just change the default namespace.
namespace "firewall"

# This defines a firewall called "no-unknown"
config "no-unknown" {
	# Flush all rules, and remove all custom chains
	action "flush" "full"
	group "table" "filter" {
		action "INPUT" "m:state" "state:NEW,INVALID" "j:REJECT"
	}
}

# The default firewall: none at all. Explicitly specifying this
# is optional, it is the default.
config "" {
	action "flush" "full"
}

# Now move to the "wireless" namespace.
namespace "wireless"

config "work" {
	# We would prefer not storing our WPA passphrases for
	# work inside tihs config file, so we tell ipcfg to ask
	# for it interactively.
	set "wpa-tkip-cfgstyle" "interactive"
	# Disable the firewall
	config "firewall:"
	# Go back to the "core" namespace, which is the central
	# part of ipcfg.
	namespace "core"
	# Tell other parts of ipcfg that we are at work
	set "network" "work"
	# Expect DHCPv4 and DHCPv6
	config ("dhcp4", "dhcp6")
}

# Having left the above block, we are now back to the "wireless"
# namespace.

config "home" {
	# WEP is a joke anyway, so we don't care as much about
	# that 'security'.
	set "wep-passphrase" "s3cr1t"
	namespace "core"
	set network "home"
	# Use zeroconf and IPv6 router advertisement.
	config ("zeroconf", "ip6-ra")
}
